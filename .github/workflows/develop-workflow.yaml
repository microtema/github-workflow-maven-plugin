name: GitHub Workflows Maven-Plugin [DEVELOP]

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

env:
  DOCKER_REGISTRY: "docker.io"
  STAGE_NAME: "develop"
  APP_NAME: "github-workflows-maven-plugin"
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  SONAR_TOKEN: "${{ secrets.SONAR_TOKEN }}"
  JAVA_VERSION: "17"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true\
    \ -DdeployAtEnd=true"
  VERSION: "2.0.1-SNAPSHOT"

jobs:
  versioning:
    name: Versioning
    runs-on: [ ubuntu-latest ]
    needs: [ ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Maven: versions:set'
        run: |
          mvn release:update-versions -DdevelopmentVersion=0.0.1-SNAPSHOT $MAVEN_CLI_OPTS
          mvn versions:set -DnewVersion=$VERSION $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact
          cp pom.xml artifact/pom.xml
      - name: 'Artifact: upload'
        uses: actions/upload-artifact@v2
        with:
          name: pom-artifact
          path: artifact/pom.xml

  compile:
    name: Compile
    runs-on: [ ubuntu-latest ]
    needs: [ versioning ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: false
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: compile'
        run: mvn compile $MAVEN_CLI_OPTS

  security_check:
    name: Security Check
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Maven: dependency-check'
        run: mvn dependency-check:help -P security -Ddownloader.quick.query.timestamp=false $MAVEN_CLI_OPTS

  unit-test:
    name: Unit Test
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: false
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: test'
        run: mvn test $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact/target/surefire-reports
          cp -r target/surefire-reports/* artifact/target/surefire-reports/
          cp -r target/jacoco.exec artifact/target/surefire-reports/
      - name: 'Test result'
        uses: actions/upload-artifact@v2
        with:
          name: target-artifact
          path: artifact

  it-test:
    name: Integration Test
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: false
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: integration-test'
        run: mvn integration-test -P it $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact/target/surefire-reports/it
          cp -r target/surefire-reports/* artifact/target/surefire-reports/it/
          cp -r target/jacoco.exec artifact/target/surefire-reports/it/
      - name: 'Test result'
        uses: actions/upload-artifact@v2
        with:
          name: target-artifact
          path: artifact

  quality-gate:
    name: Quality Gate
    runs-on: [ ubuntu-latest ]
    needs: [ unit-test, it-test ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        with:
          name: target-artifact
      - name: 'Maven: verify'
        run: mvn verify -DskipTests=true -Dcode.coverage=0.00 $MAVEN_CLI_OPTS
      - name: 'Maven: sonar'
        run: mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.branch.name=${GITHUB_REF##*/} $MAVEN_CLI_OPTS

  build:
    name: Build
    runs-on: [ ubuntu-latest ]
    needs: [ quality-gate ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: true
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: package'
        run: mvn install -P prod -Dcode.coverage=0.00 -DskipTests=true -DskipUTs=true -DskipITs=true $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact/target
          cp target/*.jar artifact/target/
      - name: 'Artifact: upload'
        uses: actions/upload-artifact@v2
        with:
          name: target-artifact
          path: artifact/target

  publish:
    name: Publish
    runs-on: [ ubuntu-latest ]
    needs: [ build ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Maven: deploy'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn deploy -Dcode.coverage=0.0 -DskipTests=true $MAVEN_CLI_OPTS

