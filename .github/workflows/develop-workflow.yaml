name: GitHub Workflows Maven-Plugin [dev]

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

env:
  DOCKER_REGISTRY: "docker.registry.local"
  SONAR_TOKEN: "d44e1870f40de9c4556bb1f507393396721e21aa"
  JAVA_VERSION: "17"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true\
    \ -DdeployAtEnd=true"

jobs:
  compile:
    name: Compile
    runs-on: [ ubuntu-latest ]
    needs: [ ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: false
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: compile'
        run: mvn compile $MAVEN_CLI_OPTS

  security_check:
    name: Security Check
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Maven: dependency-check'
        run: mvn dependency-check:help -P security -Ddownloader.quick.query.timestamp=false $MAVEN_CLI_OPTS

  unit-test:
    name: Unit Test
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: false
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: test'
        run: mvn test $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact
          mv target artifact/target
      - name: 'Test result'
        uses: actions/upload-artifact@v2
        with:
          name: target_artifact
          path: artifact/target

  it-test:
    name: Integration Test
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: false
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: integration-test'
        run: mvn integration-test -Dsurefire.skip=true $MAVEN_CLI_OPTS

  quality-gate:
    name: Quality Gate
    runs-on: [ ubuntu-latest ]
    needs: [ unit-test, it-test ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        with:
          name: target-artifact
      - name: 'Maven: sonar'
        run: |
          mvn verify -DskipTests=true -DskipITs=true -DskipUTs=true $MAVEN_CLI_OPTS
          mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN $MAVEN_CLI_OPTS

  build:
    name: Build
    runs-on: [ ubuntu-latest ]
    needs: [ quality-gate ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: true
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: package'
        run: mvn package -P prod -Dcode.coverage=0.0 -DskipTests=true $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact/target
          mv target artifact/target
      - name: 'Artifact: upload'
        uses: actions/upload-artifact@v2
        with:
          name: target-artifact
          path: artifact/target

  package:
    name: Package
    runs-on: [ ubuntu-latest ]
    needs: [ build ]
    steps:
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        with:
          name: target-artifact
      - name: 'Maven versions:get'
        run: export VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout $MAVEN_CLI_OPTS | tail -n 1)
      - name: 'Docker: login'
        run: docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY
      - name: 'Docker: build'
        run: mvn jib:dockerBuild -Dimage=$DOCKER_REGISTRY/$APP_NAME -Djib.to.tags=$VERSION $MAVEN_CLI_OPTS
      - name: 'Docker: push'
        run: docker build -t docker push $DOCKER_REGISTRY/$APP_NAME:$VERSION

  db-migration:
    name: Database Migration
    runs-on: [ ubuntu-latest ]
    needs: [ package ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Flyway: migration'
        run: echo 'TBD'

  tag:
    name: Tag Release
    runs-on: [ ubuntu-latest ]
    needs: [ db-migration ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Bump version and push tag'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

  promote:
    name: Promote
    runs-on: [ ubuntu-latest ]
    needs: [ tag ]
    steps:
      - name: 'Shell: promote'
        run: acho 'TBD'

  deployment:
    name: Deployment
    runs-on: [ ubuntu-latest ]
    needs: [ promote ]
    steps:
      - name: 'Shell: deployment'
        run: acho 'TBD'

  readiness:
    name: Readiness Check
    runs-on: [ ubuntu-latest ]
    needs: [ deployment ]
    timeout-minutes: 15
    steps:
      - name: 'Shell: readiness'
        run: while [[ "$(curl -s $SERVICE_URL | jq -r '.commitId')" != "$GITHUB_SHA" ]]; do sleep 10; done

  regression-test-e2e:
    name: Regression Test [e2e]
    runs-on: [ ubuntu-latest ]
    needs: [ readiness ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Maven: regression test'
        run: mvn integration-test -P e2e -DstageName=dev $MAVEN_CLI_OPTS

  regression-test-i2e:
    name: Regression Test [i2e]
    runs-on: [ ubuntu-latest ]
    needs: [ readiness ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Maven: regression test'
        run: mvn integration-test -P i2e -DstageName=dev $MAVEN_CLI_OPTS

  regression-test-s2e:
    name: Regression Test [s2e]
    runs-on: [ ubuntu-latest ]
    needs: [ readiness ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Maven: regression test'
        run: mvn integration-test -P s2e -DstageName=dev $MAVEN_CLI_OPTS

