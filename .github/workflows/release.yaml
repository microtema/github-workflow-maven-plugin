name: GitHub Workflows Maven-Plugin

on:
  push:
    branches:
      - release/*
  pull_request:
    branches:
      - release/*

env:
  DOCKER_REGISTRY: "docker.registry.local"
  JAVA_VERSION: "1.8"
  GIT_STRATEGY: "clone"
  GIT_DEPTH: "10"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true\
    \ -DdeployAtEnd=true"

jobs:
  versioning:
    name: Versioning
    runs-on: [ ubuntu-latest ]
    needs: [ ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Shell: sed pom.xml'
        id: pom
        run: |
          export POM_PARENT_VERSION=$(mvn help:evaluate -Dexpression=project.parent.version -q -DforceStdout $MAVEN_CLI_OPTS | tail -n 1)
          export POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout $MAVEN_CLI_OPTS | tail -n 1)
          export NEW_VERSION=${POM_VERSION/-SNAPSHOT/-RC}
          sed "s/<version>$POM_PARENT_VERSION<\/version>/<version>$NEW_VERSION<\/version>/g" pom.xml > pom.xml.bac
          mv pom.xml.bac pom.xml
          echo ::set-output name=VERSION::$NEW_VERSION
      - name: 'Maven: versions:set'
        run: |
          mvn release:update-versions -DdevelopmentVersion=0.0.1-SNAPSHOT $MAVEN_CLI_OPTS
          mvn versions:set -DnewVersion=${{ steps.pom.outputs.VERSION }} $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact
          mv pom.xml artifact/new-pom.xml
      - name: 'Artifact: upload'
        uses: actions/upload-artifact@v2
        with:
          name: pom-artifact
          path: artifact/new-pom.xml

  compile:
    name: Compile
    runs-on: [ ubuntu-latest ]
    needs: [ versioning ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: Compile'
        run: mvn compile $MAVEN_CLI_OPTS

  security_check:
    name: Security Check
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Maven: dependency-check'
        run: mvn dependency-check:help -P security -Ddownloader.quick.query.timestamp=false $MAVEN_CLI_OPTS

  unit-test:
    name: Unit Test
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: test'
        run: mvn test $MAVEN_CLI_OPTS

  it-test:
    name: Acceptance Test
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: integration-test'
        run: mvn integration-test -Dsurefire.skip=true $MAVEN_CLI_OPTS

