name: GitHub Workflows Maven-Plugin [prod]

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  DOCKER_REGISTRY: "docker.registry.local"
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  SONAR_TOKEN: "d44e1870f40de9c4556bb1f507393396721e21aa"
  JAVA_VERSION: "17"
  MAVEN_CLI_OPTS: "-s settings.xml --batch-mode --errors --fail-at-end --show-version\
    \ -DinstallAtEnd=true -DdeployAtEnd=true"

jobs:
  versioning:
    name: Versioning
    runs-on: [ ubuntu-latest ]
    needs: [ ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Shell: sed pom.xml'
        id: pom
        run: |
          export POM_PARENT_VERSION=$(mvn help:evaluate -Dexpression=project.parent.version -q -DforceStdout $MAVEN_CLI_OPTS | tail -n 1)
          export POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout $MAVEN_CLI_OPTS | tail -n 1)
          export NEW_VERSION=${POM_VERSION/-SNAPSHOT/}
          sed "s/<version>$POM_PARENT_VERSION<\/version>/<version>$NEW_VERSION<\/version>/g" pom.xml > pom.xml.bac
          mv pom.xml.bac pom.xml
          echo ::set-output name=VERSION::$NEW_VERSION
      - name: 'Maven: versions:set'
        run: |
          mvn release:update-versions -DdevelopmentVersion=0.0.1-SNAPSHOT $MAVEN_CLI_OPTS
          mvn versions:set -DnewVersion=${{ steps.pom.outputs.VERSION }} $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact
          mv pom.xml artifact/pom.xml
      - name: 'Artifact: upload'
        uses: actions/upload-artifact@v2
        with:
          name: pom-artifact
          path: artifact/pom.xml

  compile:
    name: Compile
    runs-on: [ ubuntu-latest ]
    needs: [ versioning ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: true
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: compile'
        run: mvn compile $MAVEN_CLI_OPTS

  security_check:
    name: Security Check
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Maven: dependency-check'
        run: mvn dependency-check:help -P security -Ddownloader.quick.query.timestamp=false $MAVEN_CLI_OPTS

  unit-test:
    name: Unit Test
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: true
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: test'
        run: mvn test $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact
          mv target artifact/target
      - name: 'Test result'
        uses: actions/upload-artifact@v2
        with:
          name: target-artifact
          path: artifact/target

  it-test:
    name: Integration Test
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: true
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: integration-test'
        run: mvn integration-test -Dsurefire.skip=true $MAVEN_CLI_OPTS

  quality-gate:
    name: Quality Gate
    runs-on: [ ubuntu-latest ]
    needs: [ unit-test, it-test ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        if: false
        with:
          name: target-artifact
      - name: 'Maven: sonar'
        run: |
          mvn verify -DskipTests=true -DskipITs=true -DskipUTs=true $MAVEN_CLI_OPTS
          mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN $MAVEN_CLI_OPTS

  build:
    name: Build
    runs-on: [ ubuntu-latest ]
    needs: [ quality-gate ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: true
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: package'
        run: mvn package -P prod -Dcode.coverage=0.0 -DskipTests=true $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact/target
          mv target artifact/target
      - name: 'Artifact: upload'
        uses: actions/upload-artifact@v2
        with:
          name: target-artifact
          path: artifact/target

  tag:
    name: Tag Release
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Bump version and push tag'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

  publish:
    name: Publish
    runs-on: [ ubuntu-latest ]
    needs: [ tag ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Maven: deploy'
        env:
          GITHUB_USERNAME: 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
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn deploy -Dcode.coverage=0.0 -DskipTests=true $MAVEN_CLI_OPTS

