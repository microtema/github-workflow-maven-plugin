name: GitHub Workflows Maven-Plugin

on:
  push:
    branches:
      - master

env:
  APP_NAME: "github-workflows-maven-plugin"
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  SONAR_TOKEN: "${{ secrets.SONAR_TOKEN }}"
  JAVA_VERSION: "17"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true\
    \ -DdeployAtEnd=true"
  VERSION: "2.0.1"

jobs:
  versioning:
    name: Versioning
    runs-on: [ ubuntu-latest ]
    needs: [ ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Maven: versions:set'
        run: |
          mvn release:update-versions -DdevelopmentVersion=0.0.1-SNAPSHOT $MAVEN_CLI_OPTS
          mvn versions:set -DnewVersion=$VERSION $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact
          cp pom.xml artifact/pom.xml
      - name: 'Artifact: upload'
        uses: actions/upload-artifact@v2
        with:
          name: pom-artifact
          path: artifact/pom.xml

  compile:
    name: Compile
    runs-on: [ ubuntu-latest ]
    needs: [ versioning ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: true
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: compile'
        run: mvn compile $MAVEN_CLI_OPTS

  security-check:
    name: Security Check
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Maven: dependency-check'
        run: mvn dependency-check:help -P security -Ddownloader.quick.query.timestamp=false $MAVEN_CLI_OPTS

  unit-test:
    name: Unit Test
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: true
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: test'
        run: mvn test $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact/target/surefire-reports
          cp -r target/surefire-reports/* artifact/target/surefire-reports/
          cp -r target/jacoco.exec artifact/target/surefire-reports/
      - name: 'Test result'
        uses: actions/upload-artifact@v2
        with:
          name: target-artifact
          path: artifact

  it-test:
    name: Integration Test
    runs-on: [ ubuntu-latest ]
    needs: [ compile ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: true
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: integration-test'
        run: mvn integration-test -P it -DtestType=IT -DsourceType=it $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact/target/surefire-reports/it
          cp -r target/surefire-reports/* artifact/target/surefire-reports/it/
          cp -r target/jacoco.exec artifact/target/surefire-reports/it/
      - name: 'Test result'
        uses: actions/upload-artifact@v2
        with:
          name: target-artifact
          path: artifact

  quality-gate:
    name: Quality Gate
    runs-on: [ ubuntu-latest ]
    needs: [ unit-test, it-test ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        with:
          name: target-artifact
      - name: 'Maven: verify'
        run: mvn verify -DskipTests=true -Dcode.coverage=0.00 $MAVEN_CLI_OPTS
      - name: 'Maven: sonar'
        run: mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.branch.name=${GITHUB_REF##*/} $MAVEN_CLI_OPTS

  build:
    name: Build
    runs-on: [ ubuntu-latest ]
    needs: [ quality-gate, security-check ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        if: true
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Maven: package'
        run: mvn package -P prod -Dcode.coverage=0.00 -DskipTests=true $MAVEN_CLI_OPTS
      - name: 'Artifact: prepare'
        run: |
          mkdir -p artifact/target
          cp target/*.jar artifact/target/
      - name: 'Artifact: upload'
        uses: actions/upload-artifact@v2
        with:
          name: target-artifact
          path: artifact

  package:
    name: Package
    runs-on: [ ubuntu-latest ]
    needs: [ build ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Java: Setup'
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: ${{ env.JAVA_VERSION }}
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        with:
          name: target-artifact
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Docker: login'
        run: docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY
      - name: 'Docker: build'
        run: mvn compile jib:dockerBuild -Dimage=$DOCKER_REGISTRY/$APP_NAME -Djib.to.tags=$VERSION.$GITHUB_SHA $MAVEN_CLI_OPTS
      - name: 'Docker: push'
        run: docker push $DOCKER_REGISTRY/$APP_NAME:$VERSION.$GITHUB_SHA

  tag:
    name: Tag Release
    runs-on: [ ubuntu-latest ]
    needs: [ package ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Artifact: download'
        uses: actions/download-artifact@v2
        with:
          name: pom-artifact
      - name: 'Bump version and push tag'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

  deployment:
    name: 'Deployment[master]'
    runs-on: [ ubuntu-latest ]
    needs: [ package ]
    environment: master
    env:
      CONFIG_FILE: ./helm/env_master/values.yaml
      AKS_NAMESPACE: %AKS_NAMESPACE%
      AKS_CLUSTER_NAME: %AKS_CLUSTER_NAME%
      AKS_PASSWORD: %AKS_PASSWORD%
      AKS_RESOURCE_GROUP: %AKS_RESOURCE_GROUP%
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'AKS: Set context'
        uses: azure/aks-set-context@v1
        with:
          creds: $AKS_PASSWORD
          cluster-name: $AKS_CLUSTER_NAME
          resource-group: $AKS_RESOURCE_GROUP
      - name: 'Helm: Setup'
        uses: azure/setup-helm@v1
        with:
          version: v3.5.4
      - name: 'Helm: Deploy'
        run: |
          export DEPLOYMENT_TIME=$(date '+%Y%m%d-%H%M%S')
          helm upgrade $APP_NAME helm --namespace $AKS_NAMESPACE --values $CONFIG_FILE --install --atomic --wait --timeout 300s --set image.tag=$VERSION --set deploymentTime=$DEPLOYMENT_TIME

